/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockERC20Facet,
  MockERC20FacetInterface,
} from "../../facets/MockERC20Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender_",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "construct",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from_",
        type: "address",
      },
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506111bc806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461015d57806394b91deb1461018d57806395d89b41146101ab578063a9059cbb146101c9578063dd62ed3e146101f95761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610229565b6040516100b89190610b6a565b60405180910390f35b6100db60048036038101906100d69190610c25565b6102ca565b6040516100e89190610c80565b60405180910390f35b6100f96102df565b6040516101069190610caa565b60405180910390f35b61012960048036038101906101249190610cc5565b6102f7565b6040516101369190610c80565b60405180910390f35b610147610318565b6040516101549190610d34565b60405180910390f35b61017760048036038101906101729190610d4f565b61033d565b6040516101849190610caa565b60405180910390f35b610195610394565b6040516101a29190610c80565b60405180910390f35b6101b36104e1565b6040516101c09190610b6a565b60405180910390f35b6101e360048036038101906101de9190610c25565b610582565b6040516101f09190610c80565b60405180910390f35b610213600480360381019061020e9190610d7c565b610597565b6040516102209190610caa565b60405180910390f35b6060600061023561062c565b905080600401805461024690610deb565b80601f016020809104026020016040519081016040528092919081815260200182805461027290610deb565b80156102bf5780601f10610294576101008083540402835291602001916102bf565b820191906000526020600020905b8154815290600101906020018083116102a257829003601f168201915b505050505091505090565b60006102d7338484610659565b905092915050565b6000806102ea61062c565b9050806003015491505090565b6000610304848484610765565b61030f8484846107b4565b90509392505050565b60008061032361062c565b90508060020160009054906101000a900460ff1691505090565b60008061034861062c565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b60008061039f61062c565b90506040518060400160405280600781526020017f4d6f636b47656d000000000000000000000000000000000000000000000000008152508160040190805190602001906103ee929190610a2e565b506040518060400160405280600381526020017f47454d000000000000000000000000000000000000000000000000000000000081525081600501908051906020019061043c929190610a2e565b5060128160020160006101000a81548160ff021916908360ff1602179055508060020160009054906101000a900460ff16600a6104799190610f7f565b620f42406104879190610fca565b816003018190555080600301548160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505090565b606060006104ed61062c565b90508060050180546104fe90610deb565b80601f016020809104026020016040519081016040528092919081815260200182805461052a90610deb565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b505050505091505090565b600061058f3384846107b4565b905092915050565b6000806105a261062c565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6000807f17789449870c0f58d74ae3f2b54e2ffd15a4ba87c9c4b606fe8968555d61b02f90508091505090565b600061066584836108ed565b600061066f61062c565b9050828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516107519190610caa565b60405180910390a360019150509392505050565b61077083838361093a565b6107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a690611070565b60405180910390fd5b505050565b60006107c084836108ed565b60006107ca61062c565b9050828160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461081d9190611090565b92505081905550828160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461087591906110c4565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516108d99190610caa565b60405180910390a360019150509392505050565b6108f782826109d3565b610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092d90611166565b60405180910390fd5b5050565b60008061094561062c565b9050828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410159150509392505050565b6000806109de61062c565b9050828160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101591505092915050565b828054610a3a90610deb565b90600052602060002090601f016020900481019282610a5c5760008555610aa3565b82601f10610a7557805160ff1916838001178555610aa3565b82800160010185558215610aa3579182015b82811115610aa2578251825591602001919060010190610a87565b5b509050610ab09190610ab4565b5090565b5b80821115610acd576000816000905550600101610ab5565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b0b578082015181840152602081019050610af0565b83811115610b1a576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b3c82610ad1565b610b468185610adc565b9350610b56818560208601610aed565b610b5f81610b20565b840191505092915050565b60006020820190508181036000830152610b848184610b31565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bbc82610b91565b9050919050565b610bcc81610bb1565b8114610bd757600080fd5b50565b600081359050610be981610bc3565b92915050565b6000819050919050565b610c0281610bef565b8114610c0d57600080fd5b50565b600081359050610c1f81610bf9565b92915050565b60008060408385031215610c3c57610c3b610b8c565b5b6000610c4a85828601610bda565b9250506020610c5b85828601610c10565b9150509250929050565b60008115159050919050565b610c7a81610c65565b82525050565b6000602082019050610c956000830184610c71565b92915050565b610ca481610bef565b82525050565b6000602082019050610cbf6000830184610c9b565b92915050565b600080600060608486031215610cde57610cdd610b8c565b5b6000610cec86828701610bda565b9350506020610cfd86828701610bda565b9250506040610d0e86828701610c10565b9150509250925092565b600060ff82169050919050565b610d2e81610d18565b82525050565b6000602082019050610d496000830184610d25565b92915050565b600060208284031215610d6557610d64610b8c565b5b6000610d7384828501610bda565b91505092915050565b60008060408385031215610d9357610d92610b8c565b5b6000610da185828601610bda565b9250506020610db285828601610bda565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e0357607f821691505b60208210811415610e1757610e16610dbc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610ea357808604811115610e7f57610e7e610e1d565b5b6001851615610e8e5780820291505b8081029050610e9c85610e4c565b9450610e63565b94509492505050565b600082610ebc5760019050610f78565b81610eca5760009050610f78565b8160018114610ee05760028114610eea57610f19565b6001915050610f78565b60ff841115610efc57610efb610e1d565b5b8360020a915084821115610f1357610f12610e1d565b5b50610f78565b5060208310610133831016604e8410600b8410161715610f4e5782820a905083811115610f4957610f48610e1d565b5b610f78565b610f5b8484846001610e59565b92509050818404811115610f7257610f71610e1d565b5b81810290505b9392505050565b6000610f8a82610bef565b9150610f9583610d18565b9250610fc27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610eac565b905092915050565b6000610fd582610bef565b9150610fe083610bef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561101957611018610e1d565b5b828202905092915050565b7f45524332303a20496e73756666696369656e7420416c6c6f77616e6365000000600082015250565b600061105a601d83610adc565b915061106582611024565b602082019050919050565b600060208201905081810360008301526110898161104d565b9050919050565b600061109b82610bef565b91506110a683610bef565b9250828210156110b9576110b8610e1d565b5b828203905092915050565b60006110cf82610bef565b91506110da83610bef565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561110f5761110e610e1d565b5b828201905092915050565b7f45524332303a20496e73756666696369656e742046756e647300000000000000600082015250565b6000611150601983610adc565b915061115b8261111a565b602082019050919050565b6000602082019050818103600083015261117f81611143565b905091905056fea2646970667358221220282178253da2d57e8dc67d90a66029be249f0ee93d2bb0696030ea858ec59bb964736f6c63430008090033";

type MockERC20FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20Facet__factory extends ContractFactory {
  constructor(...args: MockERC20FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20Facet> {
    return super.deploy(overrides || {}) as Promise<MockERC20Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC20Facet {
    return super.attach(address) as MockERC20Facet;
  }
  override connect(signer: Signer): MockERC20Facet__factory {
    return super.connect(signer) as MockERC20Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20FacetInterface {
    return new utils.Interface(_abi) as MockERC20FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20Facet {
    return new Contract(address, _abi, signerOrProvider) as MockERC20Facet;
  }
}
